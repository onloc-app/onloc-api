generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model devices {
  id         BigInt      @id @default(autoincrement())
  user_id    BigInt
  name       String      @db.VarChar(255)
  icon       String?     @db.VarChar(255)
  created_at DateTime    @db.Timestamp(0)
  updated_at DateTime    @db.Timestamp(0)
  users      users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "devices_user_id_foreign")
  locations  locations[]

  @@unique([user_id, name], map: "devices_user_id_name_unique")
}

model locations {
  id                BigInt   @id @default(autoincrement())
  device_id         BigInt
  accuracy          Float?
  altitude          Float?
  altitude_accuracy Float?
  latitude          Float
  longitude         Float
  battery           Int?
  created_at        DateTime @db.Timestamp(0)
  updated_at        DateTime @db.Timestamp(0)
  devices           devices  @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "locations_device_id_foreign")
}

model settings {
  id         BigInt   @id @default(autoincrement())
  key        String   @db.VarChar(255)
  value      String   @db.VarChar(255)
  created_at DateTime @db.Timestamp(0)
  updated_at DateTime @db.Timestamp(0)
}

model preferences {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  key        String   @db.VarChar(255)
  value      String   @db.VarChar(255)
  created_at DateTime @db.Timestamp(0)
  updated_at DateTime @db.Timestamp(0)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "preferences_user_id_foreign")
}

model users {
  id            BigInt          @id @default(autoincrement())
  username      String          @unique(map: "users_username_unique") @db.VarChar(255)
  password      String          @db.VarChar(255)
  admin         Boolean         @default(false)
  created_at    DateTime        @db.Timestamp(0)
  updated_at    DateTime        @db.Timestamp(0)
  devices       devices[]
  refreshTokens refreshTokens[]
  preferences   preferences[]
}

model refreshTokens {
  id         BigInt   @id @default(autoincrement())
  token      String   @unique(map: "refreshTokens_token_unique")
  user_id    BigInt
  agent      String?
  created_at DateTime @db.Timestamp(0)
  updated_at DateTime @db.Timestamp(0)
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
